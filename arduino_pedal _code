// encoder_pots.ino
// Define control pins
const int RPWM = 5; // PWM pin
const int LPWM = 6; // PWM pin
const int R_EN = 7;
const int L_EN = 8;

const int BRAKE_POT = A0;
const int ACCEL_POT = A1;
const int ENC_A     = 2;  // interrupt pin
const int ENC_B     = 3;

volatile long encoderTicks = 0;
// ±1200 ticks = ±2 full revolutions at 600 PPR
const long MAX_TICKS = 1200;

void setup() {
  pinMode(ENC_A, INPUT_PULLUP);
  pinMode(ENC_B, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(ENC_A), onEncoderChange, CHANGE);
  // Set control pins as outputs
  pinMode(RPWM, OUTPUT);
  pinMode(LPWM, OUTPUT);
  pinMode(R_EN, OUTPUT);
  pinMode(L_EN, OUTPUT);

  // Enable both channels
  digitalWrite(R_EN, HIGH);
  digitalWrite(L_EN, HIGH);
  
  
  Serial.begin(9600);
}

void loop() {
  // 1) Read brake & accel pots
  float brake = 1.0 - (analogRead(BRAKE_POT) / 1023.0);
  float accel =     analogRead(ACCEL_POT) / 1023.0;

  // 2) Snapshot & clamp encoder ticks
  noInterrupts();
  long ticks = encoderTicks;
  interrupts();
  ticks = constrain(ticks, -MAX_TICKS, MAX_TICKS);

  // 3) Normalize to -1…+1
  float steer = ticks / float(MAX_TICKS);

  // === Control motor for resistive torque ===
  const int torque = 40; // resistance torque value (0-255)
  if (steer > 0.05) { // add a deadzone to avoid jitter
    analogWrite(RPWM, torque);
    analogWrite(LPWM, 0);
  } else if (steer < -0.05) {
    analogWrite(RPWM, 0);
    analogWrite(LPWM, torque);
  } else {
    analogWrite(RPWM, 0);
    analogWrite(LPWM, 0);
  }

  // 4) Send CSV: steer, brake, accel
  Serial.print(steer, 3);
  Serial.print(',');
  Serial.print(brake, 3);
  Serial.print(',');
  Serial.println(accel, 3);

  // 5) Delay
  delay(20);
}


void onEncoderChange() {
  // Quadrature decoding
  bool a = digitalRead(ENC_A);
  bool b = digitalRead(ENC_B);
  encoderTicks += (a == b) ? +1 : -1;
}
